Server:

* Capped collection for logs.
* Add user interface for viewing logs.
* Real-time stats: last fetch for each source, number of clients connected,
  number of calls per API per day, etc.
* We should probably set an appropriate User-agent on requests.

Client:

* High priority: better font.  Helvetica may seem appropriate, but it's 
  actually bad for signage applications like this as it's prone to halation
  problems.  We'll try Droid Sans for now.
* Time format should be customizable.
* Weather should be made generic (see discussion of sources, below).
* Presently we display as many bus predictions as will fit, regardless of time.
  We may want to only display predictions with in a certain interval (one hour,
  for example), or otherwise improve formatting for distant predictions--show 
  them as "1:24" rather than "84 minutes" or "at 4:30" (using the absolute time).
* Fix reconnect bug (on reconnect, the initialization routine runs again,
  but it's not designed for that).
* Related: the server should have a way to tell the client that data has
  gone stale.
* Improve configuration mechanism: we now store the configuration in
  MongoDB, which is a good step, but we also need a GUI configurator
  to generate the configuration documents and save them to the database.

Both:

* Only update services when they are actually operating;
  communicate on the sign when the last train has gone, etc.

Other data sources:

* Air quality (http://www.airnowgateway.org/, requires registration
  and is excessively bureaucratic)
* Weather forecast (http://www.weather.gov/forecasts/xml/)
* Canadian weather (http://dd.weatheroffice.gc.ca/)
* Australian weather (ftp://ftp2.bom.gov.au/anon/gen/fwo)
* FAA air traffic delays (might be good for intermodal transit centers
  at airports or which provide service to an airport):
  http://www.fly.faa.gov/flyfaa/xmlAirportStatus.jsp
* See CITIES for more on transit data sources.
